const express = require("express");
const multer = require("multer");
const mysql = require("mysql2");
const XLSX = require("xlsx");
const path = require("path");
const fs = require("fs");

const app = express();
const port = 3000;

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static("public")); // Serve static files

// C·∫•u h√¨nh mysql
const connection = mysql.createConnection({
  host: "localhost",
  user: "root",
  password: "MayHoaThoDB@12345!", // <-- ƒê·ªïi th√†nh password MySQL c·ªßa anh
  database: "quan_ly_luong",
  port: 3306,
});

// Test k·∫øt n·ªëi MySQL
connection.connect((err) => {
  if (err) {
    console.error("‚ùå L·ªói k·∫øt n·ªëi MySQL:", err.message);
    console.error("Chi ti·∫øt l·ªói:", err);
    process.exit(1);
  } else {
    console.log("‚úÖ K·∫øt n·ªëi MySQL th√†nh c√¥ng!");
  }
});

// C·∫•u h√¨nh multer upload file
const upload = multer({ dest: "uploads/" });

// Route cho trang ch·ªß
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "index.html"));
});

// API upload file excel
app.post("/upload", upload.single("file"), (req, res) => {
  const filePath = req.file.path;
  const workbook = XLSX.readFile(filePath);
  const sheet_name = workbook.SheetNames[0];
  const data = XLSX.utils.sheet_to_json(workbook.Sheets[sheet_name]);

  // L·∫∑p qua t·ª´ng d√≤ng excel insert v√†o MySQL
  data.forEach((row) => {
    const { ma_nv, ho_ten, luong_cb, phu_cap, thue, thuc_linh } = row;

    connection.query(
      "INSERT INTO luong_import (ma_nv, ho_ten, luong_cb, phu_cap, thue, thuc_linh) VALUES (?, ?, ?, ?, ?, ?)",
      [ma_nv, ho_ten, luong_cb, phu_cap, thue, thuc_linh],
      (err) => {
        if (err) console.error(err);
      }
    );
  });

  // Xo√° file sau khi ƒë·ªçc xong cho s·∫°ch
  fs.unlinkSync(filePath);

  res.send("Import file excel th√†nh c√¥ng!");
});

// ‚úÖ API l·∫•y danh s√°ch b·∫£ng l∆∞∆°ng
app.get("/luong", (req, res) => {
  console.log("üìã ƒêang l·∫•y danh s√°ch b·∫£ng l∆∞∆°ng...");

  connection.query("SELECT * FROM luong_import", (err, results) => {
    if (err) {
      console.error("‚ùå L·ªói khi truy v·∫•n database:", err.message);
      console.error("Chi ti·∫øt l·ªói:", err);

      // Ki·ªÉm tra l·ªói c·ª• th·ªÉ
      if (err.code === "ER_NO_SUCH_TABLE") {
        res.status(500).json({
          error: "B·∫£ng luong_import kh√¥ng t·ªìn t·∫°i",
          message: "Vui l√≤ng t·∫°o b·∫£ng tr∆∞·ªõc khi s·ª≠ d·ª•ng API",
        });
      } else if (err.code === "ER_ACCESS_DENIED_ERROR") {
        res.status(500).json({
          error: "L·ªói quy·ªÅn truy c·∫≠p database",
          message: "Ki·ªÉm tra l·∫°i th√¥ng tin k·∫øt n·ªëi MySQL",
        });
      } else {
        res.status(500).json({
          error: "L·ªói database",
          message: err.message,
        });
      }
    } else {
      console.log(`‚úÖ L·∫•y ƒë∆∞·ª£c ${results.length} b·∫£n ghi`);
      res.json({
        success: true,
        count: results.length,
        data: results,
      });
    }
  });
});

// ‚úÖ API l·∫•y th√¥ng tin l∆∞∆°ng theo m√£ nh√¢n vi√™n (cho C√¥ng Nh√¢n)
app.get("/luong/:ma_nv", (req, res) => {
  const { ma_nv } = req.params;
  console.log(`üìã C√¥ng nh√¢n ${ma_nv} ƒëang tra c·ª©u l∆∞∆°ng...`);

  connection.query(
    "SELECT * FROM luong_import WHERE ma_nv = ?",
    [ma_nv],
    (err, results) => {
      if (err) {
        console.error("‚ùå L·ªói khi truy v·∫•n database:", err.message);
        res.status(500).json({
          error: "L·ªói database",
          message: err.message,
        });
      } else if (results.length === 0) {
        console.log(`‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y th√¥ng tin l∆∞∆°ng cho m√£ NV: ${ma_nv}`);
        res.status(404).json({
          error: "Kh√¥ng t√¨m th·∫•y",
          message: `Kh√¥ng t√¨m th·∫•y th√¥ng tin l∆∞∆°ng cho m√£ nh√¢n vi√™n: ${ma_nv}`,
        });
      } else {
        console.log(`‚úÖ T√¨m th·∫•y th√¥ng tin l∆∞∆°ng cho NV: ${ma_nv}`);
        res.json({
          success: true,
          data: results[0],
        });
      }
    }
  );
});

// ‚úÖ API k√Ω t√™n x√°c nh·∫≠n (cho C√¥ng Nh√¢n)
app.post("/luong/:ma_nv/ky-ten", (req, res) => {
  const { ma_nv } = req.params;
  const { ho_ten } = req.body;

  console.log(`‚úçÔ∏è  C√¥ng nh√¢n ${ma_nv} ƒëang k√Ω t√™n x√°c nh·∫≠n...`);

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√£ k√Ω
  connection.query(
    "UPDATE luong_import SET da_ky = 1, ngay_ky = NOW(), ten_da_ky = ? WHERE ma_nv = ?",
    [ho_ten, ma_nv],
    (err, result) => {
      if (err) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t k√Ω t√™n:", err.message);
        res.status(500).json({
          error: "L·ªói database",
          message: err.message,
        });
      } else if (result.affectedRows === 0) {
        res.status(404).json({
          error: "Kh√¥ng t√¨m th·∫•y",
          message: `Kh√¥ng t√¨m th·∫•y th√¥ng tin l∆∞∆°ng cho m√£ nh√¢n vi√™n: ${ma_nv}`,
        });
      } else {
        console.log(`‚úÖ C√¥ng nh√¢n ${ma_nv} ƒë√£ k√Ω t√™n th√†nh c√¥ng`);
        res.json({
          success: true,
          message: "K√Ω t√™n x√°c nh·∫≠n th√†nh c√¥ng",
          data: {
            ma_nv,
            ho_ten,
            ngay_ky: new Date(),
          },
        });
      }
    }
  );
});

// ‚úÖ API ƒëƒÉng nh·∫≠p ƒë∆°n gi·∫£n
app.post("/login", (req, res) => {
  const { username, password, role } = req.body;

  console.log(`üîê ƒêƒÉng nh·∫≠p: ${username} - Role: ${role}`);

  // ƒêƒÉng nh·∫≠p ƒë∆°n gi·∫£n (trong th·ª±c t·∫ø n√™n d√πng JWT v√† hash password)
  if (role === "admin" && username === "admin" && password === "admin123") {
    res.json({
      success: true,
      message: "ƒêƒÉng nh·∫≠p Admin th√†nh c√¥ng",
      user: {
        username: "admin",
        role: "admin",
        fullName: "Qu·∫£n tr·ªã vi√™n",
      },
    });
  } else if (role === "employee") {
    // Ki·ªÉm tra m√£ nh√¢n vi√™n c√≥ t·ªìn t·∫°i kh√¥ng
    connection.query(
      "SELECT * FROM luong_import WHERE ma_nv = ?",
      [username],
      (err, results) => {
        if (err) {
          res.status(500).json({
            error: "L·ªói database",
            message: err.message,
          });
        } else if (results.length === 0) {
          res.status(401).json({
            error: "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i",
            message: "M√£ nh√¢n vi√™n kh√¥ng t·ªìn t·∫°i",
          });
        } else {
          res.json({
            success: true,
            message: "ƒêƒÉng nh·∫≠p C√¥ng nh√¢n th√†nh c√¥ng",
            user: {
              username: results[0].ma_nv,
              role: "employee",
              fullName: results[0].ho_ten,
            },
          });
        }
      }
    );
  } else {
    res.status(401).json({
      error: "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i",
      message: "Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng ch√≠nh x√°c",
    });
  }
});

// Ch·∫°y server
app.listen(port, () => {
  console.log(`Server ch·∫°y t·∫°i http://localhost:${port}`);
});
